{"version":3,"sources":["components/css-modules/recipe.module.css","components/Recipes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","props","className","style","recipes","titles","title","lists","ingredients","map","ingredient","text","paragraphs","calories","images","src","image","alt","App","useState","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","fetch","then","response","json","data","hits","onSubmit","event","preventDefault","type","placeholder","value","onChange","target","recipe","key","label","Math","round","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kHACAA,EAAOC,QAAU,CAAC,QAAU,wBAAwB,OAAS,uBAAuB,MAAQ,sBAAsB,WAAa,2BAA2B,OAAS,yB,2LCiBpJC,EAfA,SAACC,GACZ,OACI,yBAAKC,UAAWC,IAAMC,SAClB,wBAAIF,UAAWC,IAAME,QAASJ,EAAMK,OACpC,wBAAIJ,UAAWC,IAAMI,OAChBN,EAAMO,YAAYC,KAAI,SAAAC,GAAU,OAC7B,4BAAKA,EAAWC,UAGxB,uBAAGT,UAAWC,IAAMS,YAApB,aAA2CX,EAAMY,UACjD,yBAAKX,UAAWC,IAAMW,OAAQC,IAAKd,EAAMe,MAAOC,IAAI,OC+CjDC,EAxDH,WACV,IADgB,EAIYC,mBAAS,IAJrB,mBAIXf,EAJW,KAIFgB,EAJE,OAKUD,mBAAS,IALnB,mBAKXE,EALW,KAKHC,EALG,OAMQH,mBAAS,WANjB,mBAMXI,EANW,KAMJC,EANI,KASjBC,qBAAU,WACRC,MACC,CAACH,IAGH,IAAMG,EAAa,WACjBC,MAAM,mCAAD,OAAoCJ,EAApC,mBAdQ,WAcR,oBAbK,qCAcTK,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIX,EAAWW,EAAKC,UAgBhC,OACE,yBAAK9B,UAAU,OACb,0BAAMA,UAAU,cAAc+B,SATZ,SAAAC,GACpBA,EAAMC,iBACNX,EAASH,GACTC,EAAU,MAON,2BAAOpB,UAAU,aAAakC,KAAK,OAAOC,YAAY,oCAAoCC,MAAOjB,EAAQkB,SAd1F,SAAAL,GACnBZ,EAAUY,EAAMM,OAAOF,UAcnB,2BAAOpC,UAAU,gBAAgBkC,KAAK,YAExC,yBAAKlC,UAAU,qBACdE,EAAQK,KAAI,SAAAgC,GACX,OACI,kBAAC,EAAD,CACDC,IAAKD,EAAOA,OAAOE,MACnBrC,MAAOmC,EAAOA,OAAOE,MACrBnC,YAAaiC,EAAOA,OAAOjC,YAC3BK,SAAU+B,KAAKC,MAAMJ,EAAOA,OAAO5B,UACnCG,MAAOyB,EAAOA,OAAOzB,cCvCZ8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.3052434a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipes\":\"recipe_recipes__7_nuP\",\"titles\":\"recipe_titles__1sUzm\",\"lists\":\"recipe_lists__36F46\",\"paragraphs\":\"recipe_paragraphs__3x7vr\",\"images\":\"recipe_images__1jCu_\"};","import React from \"react\";\r\nimport style from \"./css-modules/recipe.module.css\";\r\n\r\nconst Recipe = (props) => {\r\n    return(\r\n        <div className={style.recipes}>\r\n            <h1 className={style.titles}>{props.title}</h1>\r\n            <ol className={style.lists}>\r\n                {props.ingredients.map(ingredient => (\r\n                    <li>{ingredient.text}</li>\r\n                ))}\r\n            </ol>\r\n            <p className={style.paragraphs}>Calories: {props.calories}</p>\r\n            <img className={style.images} src={props.image} alt=\"\"/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Recipe;","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport Recipe from \"./components/Recipes\";\n\nconst App = () => {\n  const APP_ID = \"05d7f1d1\";\n  const KEY = \"0b727813b5cd72b05e18830036b320c3\";\n\nconst [recipes, setRecipes] = useState([]);\n const[search, setSearch] = useState(\"\");\n const[query, setQuery] = useState(\"chicken\");\n\n\n useEffect(() => {\n   getRecipes();\n }, [query])\n\n\n  const getRecipes = () => {\n    fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${KEY}`)\n    .then(response => response.json())\n    .then(data => setRecipes(data.hits))\n  }\n\n\n\n  const updateSearch = event => {\n    setSearch(event.target.value);\n  }\n\n  const searchResults = event => {\n    event.preventDefault();\n    setQuery(search);\n    setSearch(\"\");\n  }\n\n  \n  return (\n    <div className=\"app\">\n      <form className=\"search-form\" onSubmit={searchResults}>\n        <input className=\"search-bar\" type=\"text\" placeholder=\"Search ingredients, e.g potato...\" value={search} onChange={updateSearch}/>\n        <input className=\"search-button\" type=\"submit\"/>\n      </form>\n      <div className=\"recipes-container\">\n      {recipes.map(recipe => {\n        return(\n            <Recipe\n           key={recipe.recipe.label}\n           title={recipe.recipe.label}\n           ingredients={recipe.recipe.ingredients}\n           calories={Math.round(recipe.recipe.calories)}\n           image={recipe.recipe.image}\n           />\n        );\n      })}\n      </div>  \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}